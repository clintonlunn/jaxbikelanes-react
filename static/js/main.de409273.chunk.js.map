{"version":3,"sources":["components/BikeMap.js","App.js","reportWebVitals.js","index.js"],"names":["Map","useState","onselect","setOnselect","cyclewayObj","highlightFeature","e","console","log","layer","target","feature","properties","name","cyclewayleft","cyclewayright","cycleway","highway","maxspeed","setStyle","weight","color","fillOpacity","resetHighlight","style","mapBikeLaneColorToClassification","cyclewayClassObject","opacity","dashArray","features","map","className","MapContainer","zoom","scrollWheelZoom","height","width","margin","center","TileLayer","attribution","url","GeoJSON","data","onEachFeature","on","mouseover","mouseout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qj3nFAqIeA,EA7HH,WACR,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAc,GAEdC,EAAoB,SAAAC,GACtBC,QAAQC,IAAI,8BACZ,IAAIC,EAAQH,EAAEI,OACd,EAA2EJ,EAAEI,OAAOC,QAAQC,WAApFC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,SAAUC,EAArD,EAAqDA,QAASC,EAA9D,EAA8DA,SAC9Dd,EAAYU,aAAeA,EAC3BV,EAAYW,cAAgBA,EAC5BX,EAAYY,SAAWA,EACvBZ,EAAYa,QAAUA,EAEtBd,EAAY,CACRU,KAAKA,EACLC,aAAcA,EACdC,cAAeA,EACfC,SAASA,EACTC,QAAQA,EACRC,SAAUA,IAEdT,EAAMU,SAAS,CACXC,OAAQ,EACRC,MAAO,QACPC,YAAa,KAIfC,EAAiB,SAAAjB,GACnBH,EAAY,IACZG,EAAEI,OAAOS,SAASK,EAAMlB,EAAEI,OAAOC,WAW/Bc,EAAmC,SAACC,GAEtC,OAAyC,OAArCA,EAAoBZ,cAGyB,OAAtCY,EAAoBX,eAGa,OAAjCW,EAAoBV,UAEY,OAAhCU,EAAoBT,QANpB,UAUA,SAITO,EAAS,SAAAb,GACX,IAAMe,EAAsB,GAK5B,OAJAA,EAAoBZ,aAAeH,EAAQC,WAAWE,aACtDY,EAAoBX,cAAgBJ,EAAQC,WAAWG,cACvDW,EAAoBV,SAAWL,EAAQC,WAAWI,SAClDU,EAAoBT,QAAUN,EAAQC,WAAWK,QACzC,CAEJG,OAAQ,EACRO,QAAS,EAETN,MAAOI,EAAiCC,GACxCE,UAAW,IACXN,YAAa,KAQbX,EAAUkB,IAASC,KAAI,SAAAnB,GAC3B,OAAOA,KAEX,OACK,sBAAKoB,UAAU,YAAf,UACG,sBAAKA,UAAU,SAAf,UACA,oBAAIA,UAAU,UAAd,qCACA,mBAAGA,UAAU,aAAb,0DACA,qBAAKA,UAAU,GAAf,SACI,sBAAKA,UAAU,GAAf,WACE7B,EAASW,MACX,sBAAKkB,UAAU,oBAAf,UACI,6DACA,uEAGH7B,EAASW,MACN,qBAAIkB,UAAU,cAAd,UAEI,8CAAiB7B,EAASW,QAC1B,2CAAcX,EAASc,YACvB,0CAAad,EAASe,WACtB,2CAAcf,EAASgB,eAG/B,eAACc,EAAA,EAAD,CAAcC,KAAM,GACnBC,iBAAiB,EAChBV,MAhCG,CACbW,OAAQ,OACRC,MAAO,MACPC,OAAQ,UA8BGC,OAAQ,CAAC,MAAO,MAHnB,UAII,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAER9B,GACA,cAAC+B,EAAA,EAAD,CAASC,KAAMhC,EACfa,MAAOA,EACPoB,cAlFK,SAACjC,EAASF,GAC3BA,EAAMoC,GAAG,CACLC,UAAWzC,EACX0C,SAAUxB,mBC9BPyB,G,MATH,WACV,OACE,qBAAKjB,UAAY,YAAjB,SACE,cAAC,EAAD,QCGSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de409273.chunk.js","sourcesContent":["import 'leaflet/dist/leaflet.css';\nimport React,{useState} from 'react';\nimport { MapContainer, TileLayer, GeoJSON} from 'react-leaflet';\nimport {features} from '../data/jaxbikelanes-lines.json';\nimport './BikeMap.css';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst Map = ()=>{\n    const [onselect, setOnselect] = useState({});\n    const cyclewayObj = {};\n    /* function determining what should happen onmouseover, this function updates our state*/\n    const highlightFeature = (e=> {\n        console.log(\"highlightFeature triggered\");\n        var layer = e.target;\n        const { name, cyclewayleft, cyclewayright, cycleway, highway, maxspeed } = e.target.feature.properties;\n        cyclewayObj.cyclewayleft = cyclewayleft;\n        cyclewayObj.cyclewayright = cyclewayright;\n        cyclewayObj.cycleway = cycleway;\n        cyclewayObj.highway = highway;\n\n        setOnselect({\n            name:name,\n            cyclewayleft: cyclewayleft,\n            cyclewayright: cyclewayright,\n            cycleway:cycleway,\n            highway:highway,\n            maxspeed: maxspeed\n        });\n        layer.setStyle({\n            weight: 1,\n            color: \"black\",\n            fillOpacity: 1\n        });\n    });\n    /*resets our state i.e no properties should be displayed when a feature is not clicked or hovered over */\n    const resetHighlight= (e =>{\n        setOnselect({});\n        e.target.setStyle(style(e.target.feature));\n    })\n    /* this function is called when a feature in the map is hovered over or when a mouse moves out of it, the function calls two functions\n     highlightFeature and resetHighlight*/\n    const onEachFeature= (feature, layer)=> {\n        layer.on({\n            mouseover: highlightFeature,\n            mouseout: resetHighlight,\n        });\n    }\n\n    const mapBikeLaneColorToClassification = (cyclewayClassObject) => {\n\n        if (cyclewayClassObject.cyclewayleft !== null) {\n            // return \"#7fb6ef\";\n            return \"#1e7cdc\";\n        } else if (cyclewayClassObject.cyclewayright !== null) {\n            // return \"#7fb6ef\";\n            return \"#1e7cdc\";\n        } else if (cyclewayClassObject.cycleway !== null) {\n            return \"#1e7cdc\";\n        } else if (cyclewayClassObject.highway !== null) {\n            // return \"#0861bd\";\n            return \"#1e7cdc\";\n        } else {\n            return \"green\"\n        }\n    }\n\n    const style = (feature => {\n        const cyclewayClassObject = {};\n        cyclewayClassObject.cyclewayleft = feature.properties.cyclewayleft;\n        cyclewayClassObject.cyclewayright = feature.properties.cyclewayright;\n        cyclewayClassObject.cycleway = feature.properties.cycleway;\n        cyclewayClassObject.highway = feature.properties.highway;\n        return ({\n            // fillColor: mapPolygonColorToDensity(feature.properties.Desnity),\n            weight: 3,\n            opacity: 1,\n            // color: 'blue',\n            color: mapBikeLaneColorToClassification(cyclewayClassObject),\n            dashArray: '2',\n            fillOpacity: 0.5\n        });\n    });\n    const mapStyle = {\n        height: '55vh',\n        width: '85%',\n        margin: '0 auto',\n    }\n      const feature = features.map(feature=>{\n        return(feature);\n    });\n    return(\n         <div className='container'>\n            <div className=\"header\">\n            <h2 className='heading'>Jacksonville Bike Lanes</h2>\n            <p className=\"text-muted\">Jacksonville Bike lanes by classification</p></div>\n            <div className=\"\">\n                <div className=\"\">\n                {!onselect.name && (\n                <div className=\"census-info-hover\">\n                    <strong>Jacksonville Bike Lanes</strong>\n                    <p>Hover on each line for more details</p>\n                </div>\n                )}\n                {onselect.name && (\n                    <ul className=\"census-info\">\n                       {/* <li><strong>{onselect.county}</strong></li><br/> */}\n                        <li>Street Name:{onselect.name}</li>\n                        <li>Cycleway:{onselect.cycleway}</li>\n                        <li>Highway:{onselect.highway}</li>\n                        <li>Maxspeed:{onselect.maxspeed}</li>\n                    </ul>\n                )}\n                <MapContainer zoom={10}\n                 scrollWheelZoom={true} \n                  style={mapStyle} \n                   center={[30.3, -81.6]}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                   {feature && (\n                    <GeoJSON data={feature} \n                    style={style} \n                    onEachFeature={onEachFeature}/>\n                    )}\n                </MapContainer>\n                </div>\n            </div>\n        </div>\n\n    )\n}\nexport default Map;","import React from 'react';\nimport './App.css';\n// import Map from './components/Map';\nimport BikeMap from './components/BikeMap';\nimport Legend from './components/Legend';\n\nconst App = () => {\n  return (\n    <div className = 'container'>\n      <BikeMap />\n      {/* <Legend /> */}\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}