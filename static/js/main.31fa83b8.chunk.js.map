{"version":3,"sources":["components/util/BikeMapUtil.js","components/BikeMap.js","App.js","reportWebVitals.js","index.js"],"names":["mapStyle","height","width","margin","createStyle","feature","cyclewayClassObject","cyclewayleft","properties","cyclewayright","cycleway","highway","weight","opacity","color","fillOpacity","dashArray","setLaneStyle","Map","useState","onselect","setOnselect","highlightFeature","e","layer","target","name","maxspeed","setStyle","features","map","className","MapContainer","zoom","scrollWheelZoom","style","center","TileLayer","attribution","url","GeoJSON","data","onEachFeature","on","click","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"si3nFACMA,G,MAAW,CACbC,OAAQ,QACRC,MAAO,OACPC,OAAQ,WAgDNC,EAAe,SAAAC,GACjB,IAAMC,EAAsB,GAK5B,OAJAA,EAAoBC,aAAeF,EAAQG,WAAWD,aACtDD,EAAoBG,cAAgBJ,EAAQG,WAAWC,cACvDH,EAAoBI,SAAWL,EAAQG,WAAWE,SAClDJ,EAAoBK,QAAUN,EAAQG,WAAWG,QAlDhC,SAACL,GAGlB,MAAoC,aAAhCA,EAAoBK,QACb,CACHC,OAAQ,EACRC,QAAS,EACTC,MAAO,UACPC,YAAa,IAE4B,SAAtCT,EAAoBG,eAAkE,SAArCH,EAAoBC,aACrE,CACHK,OAAQ,EACRC,QAAS,EACTC,MAAO,UACPE,UAAW,QACXD,YAAa,IAEuB,SAAjCT,EAAoBI,SACpB,CACHE,OAAQ,EACRC,QAAS,EACTC,MAAO,UAEPC,YAAa,KAEVT,EAAoBI,SACpB,CACHE,OAAQ,EACRC,QAAS,EACTC,MAAO,MAEPC,YAAa,KAmBbE,CAAaX,I,OCmDVY,EAlGH,WACR,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAGMC,EAAoB,SAAAC,GACtB,IAAIC,EAAQD,EAAEE,OACd,EAA2EF,EAAEE,OAAOpB,QAAQG,WAApFkB,EAAR,EAAQA,KAAMnB,EAAd,EAAcA,aAAcE,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,SAAUC,EAArD,EAAqDA,QAASgB,EAA9D,EAA8DA,UAEhD,CACVpB,aAAcA,EACdE,cAAeA,EACfC,SAAUA,EACVC,QAASA,IAIbU,EAAY,CACRK,KAAKA,EACLnB,aAAcA,EACdE,cAAeA,EACfC,SAASA,EACTC,QAAQA,EACRgB,SAAUA,IAEdH,EAAMI,SAAS,CACXhB,OAAQ,GACRE,MAAO,QACPC,YAAa,KAoBfV,EAAUwB,IAASC,KAAI,SAAAzB,GACzB,OAAOA,KAIX,OACK,sBAAK0B,UAAU,YAAf,UACG,qBAAKA,UAAU,SAAf,SACA,oBAAIA,UAAU,UAAd,uCAGA,qBAAKA,UAAU,GAAf,SACI,sBAAKA,UAAU,GAAf,WACEX,EAASM,MACX,sBAAKK,UAAU,oBAAf,UACI,6DACA,uEAGHX,EAASM,MACN,qBAAIK,UAAU,cAAd,UAEI,8CAAiBX,EAASM,QAC1B,2CAAcN,EAASV,YACvB,+CAAkBU,EAASb,gBAC3B,gDAAmBa,EAASX,iBAC5B,kDAAqBW,EAAST,WAC9B,2CAAcS,EAASO,eAG/B,eAACK,EAAA,EAAD,CAAcC,KAAM,GACnBC,iBAAiB,EAChBC,MAAOnC,EACNoC,OAAQ,CAAC,MAAO,MAHnB,UAII,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAERlC,GACA,cAACmC,EAAA,EAAD,CAASC,KAAMpC,EAEf8B,MAAO/B,EACPsC,cApDK,SAACrC,EAASmB,GAC3BA,EAAMmB,GAAG,CAGLC,MAAOtB,mBCrCJuB,G,MATH,WACV,OACE,qBAAKd,UAAY,YAAjB,SACE,cAAC,EAAD,QCGSe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31fa83b8.chunk.js","sourcesContent":["// general map styling\nconst mapStyle = {\n    height: '100vh',\n    width: '100%',\n    margin: '0 auto',\n}\n\nconst setLaneStyle = (cyclewayClassObject) => {\n\n    // dedicated lane\n    if (cyclewayClassObject.highway === 'cycleway') {\n        return {            \n            weight: 3,\n            opacity: 1,\n            color: \"#0000ce\",\n            fillOpacity: 0.5\n        }\n    } else if (cyclewayClassObject.cyclewayright === 'lane' || (cyclewayClassObject.cyclewayleft === 'lane')) {\n        return {            \n            weight: 3,\n            opacity: 1,\n            color: \"#0000ce\",\n            dashArray: \"10,15\",\n            fillOpacity: 0.5\n        }\n    } else if (cyclewayClassObject.cycleway === 'lane') {\n        return {            \n            weight: 3,\n            opacity: 1,\n            color: \"#0000ce\",\n            // dashArray: \"10,15\",\n            fillOpacity: 0.5\n        }\n    } else if (cyclewayClassObject.cycleway === 'shared_lane') {\n        return {            \n            weight: 3,\n            opacity: 1,\n            color: \"red\",\n            // dashArray: \"10,15\",\n            fillOpacity: 0.5\n        }\n    } else { // default obj\n        return {            \n            weight: 3,\n            opacity: 1,\n            color: \"red\",\n            // dashArray: \"10,15\",\n            fillOpacity: 0.5\n        }\n    }\n}\n\nconst createStyle = (feature => {\n    const cyclewayClassObject = {};\n    cyclewayClassObject.cyclewayleft = feature.properties.cyclewayleft;\n    cyclewayClassObject.cyclewayright = feature.properties.cyclewayright;\n    cyclewayClassObject.cycleway = feature.properties.cycleway;\n    cyclewayClassObject.highway = feature.properties.highway;\n    return (setLaneStyle(cyclewayClassObject));\n});\n\n\nexport { mapStyle, setLaneStyle, createStyle }","import 'leaflet/dist/leaflet.css';\nimport React,{useState} from 'react';\nimport { withLeaflet, MapContainer, TileLayer, GeoJSON} from 'react-leaflet';\nimport {features} from '../data/jaxbikelanes-lines.json';\nimport './BikeMap.css';\nimport { mapStyle, createStyle, setLaneStyle } from './util/BikeMapUtil'\nimport overpassQuery from './query/overpassQuery';\n\n\n\n\nconst Map = ()=>{\n    const [onselect, setOnselect] = useState({});\n    let cyclewayObj = {};\n    /* function determining what should happen onmouseover, this function updates our state*/\n    const highlightFeature = (e=> {\n        var layer = e.target;\n        const { name, cyclewayleft, cyclewayright, cycleway, highway, maxspeed } = e.target.feature.properties;\n\n        cyclewayObj = {\n            cyclewayleft: cyclewayleft,\n            cyclewayright: cyclewayright,\n            cycleway: cycleway,\n            highway: highway,\n    \n        }\n\n        setOnselect({\n            name:name,\n            cyclewayleft: cyclewayleft,\n            cyclewayright: cyclewayright,\n            cycleway:cycleway,\n            highway:highway,\n            maxspeed: maxspeed\n        });\n        layer.setStyle({\n            weight: 10,\n            color: \"black\",\n            fillOpacity: 1\n        });\n    });\n    /*resets our state i.e no properties should be displayed when a feature is not clicked or hovered over */\n    const resetHighlight= (e =>{\n        setOnselect({});\n        e.target.setStyle(createStyle(e.target.feature));\n    })\n    /* this function is called when a feature in the map is hovered over or when a mouse moves out of it, the function calls two functions\n     highlightFeature and resetHighlight*/\n    const onEachFeature= (feature, layer)=> {\n        layer.on({\n            // mouseover: highlightFeature,\n            // mouseout: resetHighlight,\n            click: highlightFeature\n        });\n    }\n\n\n\n    const feature = features.map(feature=>{\n        return(feature);\n    });\n\n\n    return(\n         <div className='container'>\n            <div className=\"header\">\n            <h2 className='heading'>Jacksonville Bike Lanes</h2>\n            {/* <p className=\"text-muted\">Jacksonville Bike lanes by classification</p> */}\n            </div>\n            <div className=\"\">\n                <div className=\"\">\n                {!onselect.name && (\n                <div className=\"census-info-hover\">\n                    <strong>Jacksonville Bike Lanes</strong>\n                    <p>Hover on each line for more details</p>\n                </div>\n                )}\n                {onselect.name && (\n                    <ul className=\"census-info\">\n                       {/* <li><strong>{onselect.county}</strong></li><br/> */}\n                        <li>Street Name:{onselect.name}</li>\n                        <li>Cycleway:{onselect.cycleway}</li>\n                        <li>CyclewayLeft:{onselect.cyclewayleft}</li>\n                        <li>CyclewayRight:{onselect.cyclewayright}</li>\n                        <li>HighwayCycleway:{onselect.highway}</li>\n                        <li>Maxspeed:{onselect.maxspeed}</li>\n                    </ul>\n                )}\n                <MapContainer zoom={12}\n                 scrollWheelZoom={true} \n                  style={mapStyle} \n                   center={[30.3, -81.6]}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                   {feature && (\n                    <GeoJSON data={feature}\n                    // <GeoJSON data={overPassResults} \n                    style={createStyle} \n                    onEachFeature={onEachFeature}/>\n                    )}\n                </MapContainer>\n                </div>\n            </div>\n        </div>\n\n    )\n}\nexport default Map;","import React from 'react';\nimport './App.css';\n// import Map from './components/Map';\nimport BikeMap from './components/BikeMap';\nimport Legend from './components/Legend';\n\nconst App = () => {\n  return (\n    <div className = 'container'>\n      <BikeMap />\n      {/* <Legend /> */}\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}